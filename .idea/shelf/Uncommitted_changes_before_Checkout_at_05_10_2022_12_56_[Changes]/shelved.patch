Index: src/GridPAC/Grid.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package GridPAC;\n\nimport Buttons.CellButton;\nimport PAC.GameView;\n\nimport javax.swing.*;\nimport java.awt.*;\n\npublic class Grid extends JPanel\n{\n    protected GameView gameView;\n    protected GridModel gridModel;\n\n    protected CellButton[] buttonArray;\n\n    protected final Icon redIcon;\n\n    public Grid(GameView gameView, Dimension _dimension, int _bombCount)\n    {\n        this.gameView = gameView;\n\n        gridModel = new GridModel(_dimension, _bombCount, this::cellChanged);\n\n        this.setLayout(new GridBagLayout());\n\n        buttonArray = new CellButton[_dimension.width * _dimension.height];\n\n        buttonCreation();\n\n        redIcon = new ImageIcon(\"textures/redIcon.png\");\n    }\n\n    private void buttonCreation()\n    {\n        GridBagConstraints buttonPlacementConstraint = new GridBagConstraints();\n        buttonPlacementConstraint.fill = GridBagConstraints.BOTH;\n        buttonPlacementConstraint.weightx = 1;\n        buttonPlacementConstraint.weighty = 1;\n        for (int y = 0; y < this.gridModel.getDimension().height; y++)\n        {\n            buttonPlacementConstraint.gridy = y;\n            for (int x = 0; x < this.gridModel.getDimension().width; x++)\n            {\n                buttonPlacementConstraint.gridx = x;\n\n                CellButton button = new CellButton(x + y * this.gridModel.getDimension().width, this);\n                buttonArray[x + y * this.gridModel.getDimension().width] = button;\n                this.add(button, buttonPlacementConstraint);\n            }\n        }\n    }\n\n    public void restartGame()\n    {\n        this.gridModel.restartGame();\n        this.gameView.gameTimer.restart();\n        this.gameView.gameTimer.stop();\n        this.gameView.updateFlagNb();\n    }\n\n    public void propagateReveal(int position)\n    {\n        this.gridModel.propagateReveal(position);\n    }\n\n    public void revealCell(int position)\n    {\n        this.gameView.gameTimer.start();\n        this.gridModel.revealCell(position);\n    }\n\n    public boolean hasFlag(int position){\n        return this.gridModel.hasFlag(position);\n    }\n\n    public void addFlag(int position)\n    {\n        gridModel.addFlag(position);\n        this.gameView.updateFlagNb();\n    }\n\n    public void removeFlag(Integer position)\n    {\n        gridModel.removeFlag(position);\n        this.gameView.updateFlagNb();\n    }\n\n    public int getCellCount() { return gridModel.getCellCount(); }\n\n    public int getCell(int position) { return gridModel.getCell(position); }\n\n    public void cellChanged(CellChangeEvent e)\n    {\n        if (e.finish)\n        {\n            this.gameView.gameTimer.stop();\n            if(e.won) onGameWin();\n            else onGameLost();\n        }\n        //update UI for cell\n        else if (e.reveal)\n        {\n            this.buttonArray[e.position].revealButton();\n        }\n        else\n        {\n            this.buttonArray[e.position].resetButton();\n        }\n    }\n\n    public void onGameWin()\n    {\n\n    }\n\n    public void onGameLost()\n    {\n\n    }\n\n    public int getFlagNumber()\n    {\n        return gridModel.getFlagArray().size();\n    }\n\n    public int getBombCount()\n    {\n        return gridModel.getBombCount();\n    }\n\n    public Boolean isOver() { return gridModel.isOver(); }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/GridPAC/Grid.java b/src/GridPAC/Grid.java
--- a/src/GridPAC/Grid.java	(revision a831c5220a8763eef4f575c3fb2e3481eb89eca3)
+++ b/src/GridPAC/Grid.java	(date 1664963435571)
@@ -56,6 +56,7 @@
         this.gameView.gameTimer.restart();
         this.gameView.gameTimer.stop();
         this.gameView.updateFlagNb();
+        this.gameView.setGameStatus("");
     }
 
     public void propagateReveal(int position)
@@ -91,6 +92,7 @@
 
     public void cellChanged(CellChangeEvent e)
     {
+        System.out.println(e.position + " " + e.reveal);
         if (e.finish)
         {
             this.gameView.gameTimer.stop();
@@ -98,24 +100,26 @@
             else onGameLost();
         }
         //update UI for cell
-        else if (e.reveal)
+        else if (e.reveal == 1)
         {
             this.buttonArray[e.position].revealButton();
         }
-        else
+        else if (e.reveal == 0)
         {
             this.buttonArray[e.position].resetButton();
+        } else if (e.reveal == 2) {
+            this.buttonArray[e.position].toggleFlag();
         }
     }
 
     public void onGameWin()
     {
-
+        gameView.setGameStatus("Won");
     }
 
     public void onGameLost()
     {
-
+        gameView.setGameStatus("Lost");
     }
 
     public int getFlagNumber()
Index: src/PAC/GameView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PAC;\n\nimport GridPAC.Grid;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.KeyEvent;\n\npublic class GameView extends JPanel\n{\n    protected Minesweeper minesweeper;\n    protected Grid grid;\n\n    public Timer gameTimer;\n    protected JLabel flagFoundLabel;\n    protected JPanel gameInfoPanel = new JPanel();\n\n    public GameView(Minesweeper minesweeper, int width, int height, int bombCount)\n    {\n        super();\n        this.minesweeper = minesweeper;\n        this.setLayout(new BorderLayout());\n\n        this.minesweeper.add(this);\n\n        this.setupGrid(width, height, bombCount);\n\n\n        gameInfoPanel.setLayout(new BoxLayout(gameInfoPanel, BoxLayout.PAGE_AXIS));\n        this.add(gameInfoPanel, BorderLayout.EAST);\n\n        flagFoundLabel = new JLabel(\"Flag: 0/\" + grid.getBombCount());\n        gameInfoPanel.add(flagFoundLabel);\n\n        JLabel timeSpentLabel = new JLabel(\"Time: 00:00:00\");\n        gameInfoPanel.add(timeSpentLabel);\n        \n        ActionListener timerAction = new ActionListener()\n        {\n            int seconds = 0;\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                seconds++;\n                timeSpentLabel.setText(\"Time: \"+ String.format(\"%02d:%02d:%02d\", seconds / 360, seconds / 60, seconds % 60));\n            }\n        };\n\n        gameTimer = new Timer(1000, timerAction);\n        gameTimer.stop();\n\n        gameInfoPanel.add(Box.createVerticalGlue());\n\n        JButton backButton = new JButton(\"Menu\");\n        gameInfoPanel.add(backButton);\n        backButton.addActionListener(e -> openMenu());\n\n        this.setupRestartButton(gameInfoPanel);\n    }\n\n    protected void setupRestartButton(JPanel parent)\n    {\n        JButton restartButton = new JButton(\"Restart Game\");\n        parent.add(restartButton);\n\n        restartButton.addActionListener(e -> grid.restartGame());\n        restartButton.setPreferredSize(new Dimension(120,60));\n        restartButton.setMnemonic(KeyEvent.VK_R);\n    }\n\n    protected void setupGrid(int width, int height, int bombCount)\n    {\n        this.grid = new Grid(this, new Dimension(width,height), bombCount);\n        JScrollPane scrollPane = new JScrollPane(grid);\n\n        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);\n        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);\n        this.add(scrollPane, BorderLayout.CENTER);\n    }\n\n    public void openMenu()\n    {\n        this.minesweeper.openMenu();\n    }\n\n    public void updateFlagNb()\n    {\n        this.flagFoundLabel.setText(\"Flags: \" + grid.getFlagNumber()+\"/\"+ grid.getBombCount());\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/PAC/GameView.java b/src/PAC/GameView.java
--- a/src/PAC/GameView.java	(revision a831c5220a8763eef4f575c3fb2e3481eb89eca3)
+++ b/src/PAC/GameView.java	(date 1664962430383)
@@ -17,6 +17,8 @@
     protected JLabel flagFoundLabel;
     protected JPanel gameInfoPanel = new JPanel();
 
+    protected JLabel gameStatusLabel;
+
     public GameView(Minesweeper minesweeper, int width, int height, int bombCount)
     {
         super();
@@ -36,7 +38,6 @@
 
         JLabel timeSpentLabel = new JLabel("Time: 00:00:00");
         gameInfoPanel.add(timeSpentLabel);
-        
         ActionListener timerAction = new ActionListener()
         {
             int seconds = 0;
@@ -50,6 +51,9 @@
         gameTimer = new Timer(1000, timerAction);
         gameTimer.stop();
 
+        gameStatusLabel = new JLabel();
+        gameInfoPanel.add(gameStatusLabel);
+
         gameInfoPanel.add(Box.createVerticalGlue());
 
         JButton backButton = new JButton("Menu");
@@ -88,4 +92,8 @@
     {
         this.flagFoundLabel.setText("Flags: " + grid.getFlagNumber()+"/"+ grid.getBombCount());
     }
+
+    public void setGameStatus(String text) {
+        this.gameStatusLabel.setText(text);
+    }
 }
Index: src/GridPAC/CellChangeEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package GridPAC;\n\nimport java.awt.*;\n\npublic class CellChangeEvent extends AWTEvent\n{\n    public final int position;\n    public final boolean reveal;\n    public final boolean finish;\n    public final boolean won;\n\n    public CellChangeEvent(Object source, int position, boolean reveal)\n    {\n        super(source, AWTEvent.RESERVED_ID_MAX);\n        this.position = position;\n        this.reveal = reveal;\n        this.finish = false;\n        this.won = false;\n    }\n\n    public CellChangeEvent(Object source, int position, boolean reveal, boolean finish, boolean won)\n    {\n        super(source, AWTEvent.RESERVED_ID_MAX);\n        this.position = position;\n        this.reveal = reveal;\n        this.finish = finish;\n        this.won = won;\n    }\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/GridPAC/CellChangeEvent.java b/src/GridPAC/CellChangeEvent.java
--- a/src/GridPAC/CellChangeEvent.java	(revision a831c5220a8763eef4f575c3fb2e3481eb89eca3)
+++ b/src/GridPAC/CellChangeEvent.java	(date 1664961724659)
@@ -5,11 +5,11 @@
 public class CellChangeEvent extends AWTEvent
 {
     public final int position;
-    public final boolean reveal;
+    public final int reveal;
     public final boolean finish;
     public final boolean won;
 
-    public CellChangeEvent(Object source, int position, boolean reveal)
+    public CellChangeEvent(Object source, int position, int reveal)
     {
         super(source, AWTEvent.RESERVED_ID_MAX);
         this.position = position;
@@ -18,7 +18,7 @@
         this.won = false;
     }
 
-    public CellChangeEvent(Object source, int position, boolean reveal, boolean finish, boolean won)
+    public CellChangeEvent(Object source, int position, int reveal, boolean finish, boolean won)
     {
         super(source, AWTEvent.RESERVED_ID_MAX);
         this.position = position;
Index: src/GridPAC/GridModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package GridPAC;\n\nimport java.awt.*;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Random;\nimport java.util.function.Consumer;\n\npublic class GridModel\n{\n    protected final Dimension dimension;\n    protected final int bombCount;\n    protected Boolean gridGenerated = false;\n    protected Boolean gameOver = false;\n    protected Integer[] CellArray;\n    protected ArrayList<Integer> CellRevealedArray; // TODO : hashset ?\n    protected ArrayList<Integer> FlagArray;\n    protected Consumer<CellChangeEvent> onCellChange;\n\n\n    public GridModel(Dimension _dimension, int _bombCount, Consumer<CellChangeEvent> cellChangeListener)\n    {\n        this.onCellChange = cellChangeListener;\n        this.dimension = _dimension;\n        this.bombCount = _bombCount;\n\n        CellArray = new Integer[_dimension.width * _dimension.height];\n        Arrays.fill(CellArray, 0);\n        CellRevealedArray = new ArrayList<>();\n        FlagArray = new ArrayList<>();\n    }\n\n    public void gridCreation(int bombNumber, int clickPosition)\n    {\n        Random r = new Random();\n        ArrayList<Integer> excluded = this.getNeighbours(clickPosition);\n        excluded.add(clickPosition);\n        int cell;\n        for(int i = 0; i < bombNumber;){\n            // selecting a random cell in the grid\n            cell = r.nextInt(this.dimension.height * this.dimension.width);\n            if(getCell(cell) != CellContent.BOMB && !excluded.contains(cell))\n            {\n                // Updating bomb count for neighbours\n                setCell(cell, CellContent.BOMB);\n                ArrayList<Integer> neighbours = this.getNeighbours(cell);\n                for (Integer n : neighbours)\n                {\n                    if(getCell(n) != CellContent.BOMB) CellArray[n] += 1;\n                }\n                i++; // Updating bomb placed count\n            }\n        }\n\n        onCellChange.accept(new CellChangeEvent(this, clickPosition, true));\n    }\n\n    public void revealCell(int position)\n    {\n        if (!isGenerated())\n        {\n            gridCreation(getBombCount(), position);\n            setGridGenerated(true);\n            propagateReveal(position);\n        }\n        else if (getCell(position) == CellContent.BOMB)\n        {\n            gameIsLost(position);\n        }\n        else if (getCell(position) == CellContent.EMPTY)\n        {\n            propagateReveal(position);\n        }\n        else\n        {\n            removeTopButton(position);\n        }\n    }\n\n    public void propagateReveal(int cell)\n    {\n        if (!hasFlag(cell))\n        {\n            ArrayList<Integer> neighbours = this.getNeighbours(cell);\n            this.removeTopButton(cell);\n\n//            TopButtonArray[cell].setVisible(false); // TODO\n            if (getCell(cell) == CellContent.EMPTY)\n            {\n                for (int n : neighbours)\n                {\n                    if (!CellRevealedArray.contains(n)) propagateReveal(n);\n                }\n            }\n            else if (getCell(cell) != CellContent.BOMB)\n            {\n                int nbOfFlagsAround = 0;\n                for (int n : neighbours)\n                {\n                    if (hasFlag(n)) nbOfFlagsAround++;\n                }\n                if (nbOfFlagsAround == getCell(cell))\n                {\n                    for (int n : neighbours)\n                    {\n                        if (!CellRevealedArray.contains(n)) propagateReveal(n);\n                    }\n                }\n            }\n            else\n            {\n                this.gameIsLost(cell);\n            }\n        }\n    }\n\n    public ArrayList<Integer> getNeighbours(int cell)\n    {\n        ArrayList<Integer> neighbours = new ArrayList<>();\n        int x = cell % dimension.width;\n        int y = cell / dimension.width;\n\n        // Vertical\n        if (y > 0) neighbours.add(cell - dimension.width);\n        if (y < dimension.height - 1) neighbours.add(cell + dimension.width);\n\n        if(x > 0)\n        {\n            neighbours.add(cell -1); // Horizontal\n            // Diagonal\n            if(y > 0) neighbours.add(cell - 1 - dimension.width);\n            if(y < dimension.height - 1) neighbours.add(cell - 1 + dimension.width);\n        }\n        if(x < dimension.width - 1)\n        {\n            neighbours.add(cell + 1); // Horizontal\n            // Diagonal\n            if(y > 0) neighbours.add(cell + 1 - dimension.width);\n            if(y < dimension.height - 1) neighbours.add(cell + 1 + dimension.width);\n        }\n\n        return neighbours;\n    }\n\n    public void gameWonRevealCheck(int position)\n    {\n        if (CellArray.length - CellRevealedArray.size() == bombCount)\n        //if (CellRevealedArray.size() + FlagArray.size() == CellArray.length - 1)\n        {\n            for(int neigh : getNeighbours(position))\n            {\n                if(!CellRevealedArray.contains(neigh) && !FlagArray.contains(neigh)) {\n                    onCellChange.accept(new CellChangeEvent(this, neigh, true));\n                }\n            }\n            onCellChange.accept(new CellChangeEvent(this, position, true, true, true));\n            gameOver = true;\n        }\n    }\n\n    public void gameWonFlagCheck()\n    {\n        if (CellRevealedArray.size() + FlagArray.size() == CellArray.length)\n        {\n            onCellChange.accept(new CellChangeEvent(this, -1, true, true, true));\n            gameOver = true;\n        }\n    }\n\n    public void gameIsLost(int losingCell)\n    {\n        gameOver = true;\n        for (int otherCell = 0; otherCell < getCellCount(); otherCell++)\n        {\n            if ( otherCell == losingCell || ( hasFlag(otherCell) && getCell(otherCell) != CellContent.BOMB))\n            {\n//                TopButtonArray[otherCell].setIcon(redIcon); // TODO : this\n            }\n            else if (!hasFlag(otherCell))\n            {\n                if (!CellRevealedArray.contains(otherCell))\n                    CellRevealedArray.add(otherCell);\n                onCellChange.accept(new CellChangeEvent(this, otherCell, true));\n            }\n        }\n        onCellChange.accept(new CellChangeEvent(this, -1, true, true, false));\n    }\n\n    public void removeTopButton(int position)\n    {\n        if (!CellRevealedArray.contains(position))\n            CellRevealedArray.add(position);\n        onCellChange.accept(new CellChangeEvent(this, position, true));\n        gameWonRevealCheck(position);\n    }\n\n    public void restartGame()\n    {\n        FlagArray.clear();\n        CellRevealedArray.clear();\n        setGridGenerated(false);\n        gameOver = false;\n        for (int i = 0; i < CellArray.length; i++)\n        {\n            recoverCell(i);\n            CellArray[i] = 0;\n        }\n    }\n\n    public void recoverCell(int position)\n    {\n        onCellChange.accept(new CellChangeEvent(this, position, false));\n    }\n\n    public Dimension getDimension() {\n        return dimension;\n    }\n\n    public Boolean isGenerated() {\n        return gridGenerated;\n    }\n\n    public Boolean isOver() {return  gameOver;}\n\n    public void setGridGenerated(Boolean gridGenerated) {\n        this.gridGenerated = gridGenerated;\n    }\n\n    public Integer getCell(int cell)\n    {\n        return CellArray[cell];\n    }\n\n    public void setCell(int position, int value) {\n        CellArray[position] = value;\n    }\n\n    public int getCellCount()\n    {\n        return CellArray.length;\n    }\n\n    public ArrayList<Integer> getFlagArray()\n    {\n        return FlagArray;\n    }\n\n    public boolean hasFlag(Integer position)\n    {\n        return FlagArray.contains(position);\n    }\n\n    public void addFlag(int position)\n    {\n        FlagArray.add(position);\n        gameWonFlagCheck();\n    }\n\n    public void removeFlag(Integer position)\n    {\n        FlagArray.remove(position);\n    }\n\n    public int getBombCount() {\n        return this.bombCount;\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/GridPAC/GridModel.java b/src/GridPAC/GridModel.java
--- a/src/GridPAC/GridModel.java	(revision a831c5220a8763eef4f575c3fb2e3481eb89eca3)
+++ b/src/GridPAC/GridModel.java	(date 1664963583851)
@@ -12,6 +12,8 @@
     protected final int bombCount;
     protected Boolean gridGenerated = false;
     protected Boolean gameOver = false;
+
+    private Boolean doFlagCheck = true;
     protected Integer[] CellArray;
     protected ArrayList<Integer> CellRevealedArray; // TODO : hashset ?
     protected ArrayList<Integer> FlagArray;
@@ -52,7 +54,7 @@
             }
         }
 
-        onCellChange.accept(new CellChangeEvent(this, clickPosition, true));
+        onCellChange.accept(new CellChangeEvent(this, clickPosition, 1));
     }
 
     public void revealCell(int position)
@@ -92,7 +94,11 @@
                     if (!CellRevealedArray.contains(n)) propagateReveal(n);
                 }
             }
-            else if (getCell(cell) != CellContent.BOMB)
+            else if (getCell(cell) == CellContent.BOMB)
+            {
+                this.gameIsLost(cell);
+            }
+            else
             {
                 int nbOfFlagsAround = 0;
                 for (int n : neighbours)
@@ -107,10 +113,6 @@
                     }
                 }
             }
-            else
-            {
-                this.gameIsLost(cell);
-            }
         }
     }
 
@@ -147,22 +149,39 @@
         if (CellArray.length - CellRevealedArray.size() == bombCount)
         //if (CellRevealedArray.size() + FlagArray.size() == CellArray.length - 1)
         {
+            /*
             for(int neigh : getNeighbours(position))
             {
                 if(!CellRevealedArray.contains(neigh) && !FlagArray.contains(neigh)) {
-                    onCellChange.accept(new CellChangeEvent(this, neigh, true));
+                    int revealInstr;
+                    System.out.println(neigh);
+                    if (neigh == CellContent.BOMB)
+                        revealInstr = 2;
+                    else
+                        revealInstr = 1;
+                    onCellChange.accept(new CellChangeEvent(this, neigh, revealInstr));
                 }
             }
-            onCellChange.accept(new CellChangeEvent(this, position, true, true, true));
+            onCellChange.accept(new CellChangeEvent(this, position, 1, true, true));
+            gameOver = true;
+            */
+            doFlagCheck = false;
+            for (int otherCell = 0; otherCell < getCellCount(); otherCell++)
+            {
+                if (!CellRevealedArray.contains(otherCell) && !FlagArray.contains(otherCell)) {
+                    onCellChange.accept(new CellChangeEvent(this, otherCell, 2));
+                }
+            }
+            onCellChange.accept(new CellChangeEvent(this, position, 1, true, true));
             gameOver = true;
         }
     }
 
     public void gameWonFlagCheck()
     {
-        if (CellRevealedArray.size() + FlagArray.size() == CellArray.length)
+        if (doFlagCheck && CellRevealedArray.size() + FlagArray.size() == CellArray.length)
         {
-            onCellChange.accept(new CellChangeEvent(this, -1, true, true, true));
+            onCellChange.accept(new CellChangeEvent(this, -1, 1, true, true));
             gameOver = true;
         }
     }
@@ -170,27 +189,30 @@
     public void gameIsLost(int losingCell)
     {
         gameOver = true;
+        doFlagCheck = false;
         for (int otherCell = 0; otherCell < getCellCount(); otherCell++)
         {
             if ( otherCell == losingCell || ( hasFlag(otherCell) && getCell(otherCell) != CellContent.BOMB))
             {
+                onCellChange.accept(new CellChangeEvent(this, otherCell, 1));
+
 //                TopButtonArray[otherCell].setIcon(redIcon); // TODO : this
             }
             else if (!hasFlag(otherCell))
             {
                 if (!CellRevealedArray.contains(otherCell))
                     CellRevealedArray.add(otherCell);
-                onCellChange.accept(new CellChangeEvent(this, otherCell, true));
+                onCellChange.accept(new CellChangeEvent(this, otherCell, 1));
             }
         }
-        onCellChange.accept(new CellChangeEvent(this, -1, true, true, false));
+        onCellChange.accept(new CellChangeEvent(this, -1, 1, true, false));
     }
 
     public void removeTopButton(int position)
     {
         if (!CellRevealedArray.contains(position))
             CellRevealedArray.add(position);
-        onCellChange.accept(new CellChangeEvent(this, position, true));
+        onCellChange.accept(new CellChangeEvent(this, position, 1));
         gameWonRevealCheck(position);
     }
 
@@ -200,6 +222,7 @@
         CellRevealedArray.clear();
         setGridGenerated(false);
         gameOver = false;
+        doFlagCheck = true;
         for (int i = 0; i < CellArray.length; i++)
         {
             recoverCell(i);
@@ -209,7 +232,7 @@
 
     public void recoverCell(int position)
     {
-        onCellChange.accept(new CellChangeEvent(this, position, false));
+        onCellChange.accept(new CellChangeEvent(this, position, 0));
     }
 
     public Dimension getDimension() {
Index: src/Buttons/CellButton.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Buttons;\n\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseListener;\n\nimport GridPAC.CellContent;\nimport GridPAC.Grid;\n\n\npublic class CellButton extends JButton\n{\n    private static final int sideLength = 48;\n    private static final int minSideLength = 16;\n    private static final int maxSideLength = 64;\n    private Image texture;\n    public int position;\n    protected Grid grid;\n\n    protected MouseListener hiddenMouseListener;\n    protected MouseListener revealedMouseListener;\n\n    public CellButton(int position, Grid g)\n    {\n        super();\n        this.position = position;\n        this.grid = g;\n\n        //this.setMaximumSize(new Dimension(50,50));\n        this.setMinimumSize(new Dimension(minSideLength, minSideLength));\n        this.setMaximumSize(new Dimension(maxSideLength, maxSideLength));\n        this.setPreferredSize(new Dimension(sideLength, sideLength));\n\n        this.addActionListener(e -> onClickHidden());\n        this.setTexture(ButtonTextures.getTopTexture(CellContent.EMPTY));\n        this.setIconTextGap(0);\n\n        CellButton thisButton = this;\n\n        hiddenMouseListener = new MouseListener(){\n            @Override\n            public void mouseClicked(MouseEvent e)\n            {\n                if (e.getButton() == MouseEvent.BUTTON1)\n                {\n                    if (!grid.hasFlag(thisButton.position))\n                    {\n                        grid.revealCell(thisButton.position);\n                    }\n                }\n                else if (e.getButton() == MouseEvent.BUTTON3)\n                {\n                    thisButton.toggleFlag();\n                }\n            }\n\n            @Override\n            public void mousePressed(MouseEvent e) {}\n\n            @Override\n            public void mouseReleased(MouseEvent e) {}\n\n            @Override\n            public void mouseEntered(MouseEvent e) {}\n\n            @Override\n            public void mouseExited(MouseEvent e) {}\n        };\n\n        revealedMouseListener = new MouseListener() {\n            @Override\n            public void mouseClicked(MouseEvent e)\n            {\n                if (e.getButton() == MouseEvent.BUTTON1) onClickRevealed();\n            }\n\n            @Override\n            public void mousePressed(MouseEvent e) {}\n\n            @Override\n            public void mouseReleased(MouseEvent e) {}\n\n            @Override\n            public void mouseEntered(MouseEvent e) {}\n\n            @Override\n            public void mouseExited(MouseEvent e) {}\n        };\n        this.addMouseListener(hiddenMouseListener);\n    }\n\n    public void setTexture(Image texture)\n    {\n        this.texture = texture;\n        this.repaint();\n    }\n\n    public void setTextureFromValue(int value)\n    {\n        if (value == CellContent.BOMB) this.setTexture(ButtonTextures.getBottomTexture(9));\n        else this.setTexture(ButtonTextures.getBottomTexture(value));\n    }\n\n    @Override\n    public void paintComponent(Graphics pen)\n    {\n        super.paintComponent(pen);\n        pen.drawImage(texture, 0, 0, this.getWidth(), this.getHeight(), null);\n    }\n\n    @Override\n    public Dimension getPreferredSize()\n    {\n        return new Dimension(this.getHeight(), this.getHeight());\n    }\n\n    private void onClickHidden()\n    {\n        grid.revealCell(this.position);\n    }\n\n    private void onClickRevealed()\n    {\n        System.out.println(\"reveal\");\n        grid.propagateReveal(this.position);\n    }\n\n    public void revealButton()\n    {\n        this.setTextureFromValue(grid.getCell(this.position));\n        this.removeListeners();\n        this.addMouseListener(revealedMouseListener);\n    }\n\n    public void resetButton()\n    {\n        this.setTexture(ButtonTextures.getTopTexture(CellContent.EMPTY));\n        this.removeListeners();\n        this.addMouseListener(hiddenMouseListener);\n    }\n\n    public void removeListeners()\n    {\n        for (MouseListener listener: this.getMouseListeners()) this.removeMouseListener(listener);\n    }\n\n    public void toggleFlag()\n    {\n        if(!grid.isOver())\n        {\n            if (grid.hasFlag(this.position))\n            {\n                this.setTexture(ButtonTextures.getTopTexture(CellContent.EMPTY));\n                grid.removeFlag(this.position);\n            }\n            else\n            {\n                this.setTexture(ButtonTextures.getTopTexture(1));\n                grid.addFlag(this.position);\n            }\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Buttons/CellButton.java b/src/Buttons/CellButton.java
--- a/src/Buttons/CellButton.java	(revision a831c5220a8763eef4f575c3fb2e3481eb89eca3)
+++ b/src/Buttons/CellButton.java	(date 1664961836091)
@@ -155,7 +155,7 @@
                 this.setTexture(ButtonTextures.getTopTexture(CellContent.EMPTY));
                 grid.removeFlag(this.position);
             }
-            else
+            else if (grid.getFlagNumber() < grid.getBombCount())
             {
                 this.setTexture(ButtonTextures.getTopTexture(1));
                 grid.addFlag(this.position);
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"3e832f75-cad5-418c-9602-d26adff604be\" name=\"Changes\" comment=\"texture and better game win conditions\">\n      <change afterPath=\"$PROJECT_DIR$/textures/top0.png\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/textures/wrongFlag.png\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/README.md\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/README.md\" afterDir=\"false\" />\n    </list>\n    <list id=\"f3490b08-647d-4663-b773-85d154917dfa\" name=\"Changes by julien\" comment=\"\" />\n    <list id=\"07044065-bcc7-4f16-aad4-ef538c759912\" name=\"Changes by Neylick\" comment=\"\" />\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Enum\" />\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectId\" id=\"2EQofZhbLI1T6A2luYyNK1yFhyK\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\n    <OptionsSetting value=\"false\" id=\"Update\" />\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\n    &quot;codeWithMe.voiceChat.enabledByDefault&quot;: &quot;false&quot;,\n    &quot;last_opened_file_path&quot;: &quot;/home/julien/Documents/M1/AdvUi/tempConverter&quot;,\n    &quot;settings.editor.selected.configurable&quot;: &quot;org.jetbrains.plugins.github.ui.GithubSettingsConfigurable&quot;\n  }\n}</component>\n  <component name=\"RecentsManager\">\n    <key name=\"CreateClassDialog.RecentsKey\">\n      <recent name=\"\" />\n    </key>\n  </component>\n  <component name=\"RunManager\">\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"Main\" />\n      <module name=\"Minesweeper\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.Main\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"3e832f75-cad5-418c-9602-d26adff604be\" name=\"Changes\" comment=\"\" />\n      <created>1662537274126</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1662537274126</updated>\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Base Minesweeper game\">\n      <created>1662561250914</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1662561250914</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"game lose, reveal whole grid\">\n      <created>1662630810277</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1662630810277</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"B for Bomb\">\n      <created>1662713167388</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1662713167388</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"Restart Button\">\n      <created>1662713779573</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1662713779573</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"test for icons\">\n      <created>1662716153570</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1662716153570</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"reset icons\">\n      <created>1662731569062</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1662731569063</updated>\n    </task>\n    <task id=\"LOCAL-00007\" summary=\"r to restart\">\n      <created>1663055026905</created>\n      <option name=\"number\" value=\"00007\" />\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1663055026905</updated>\n    </task>\n    <task id=\"LOCAL-00008\" summary=\"better full screen\">\n      <created>1663057398576</created>\n      <option name=\"number\" value=\"00008\" />\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1663057398576</updated>\n    </task>\n    <task id=\"LOCAL-00009\" summary=\"small corrections and task repartition\">\n      <created>1663149356662</created>\n      <option name=\"number\" value=\"00009\" />\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1663149356662</updated>\n    </task>\n    <task id=\"LOCAL-00010\" summary=\"texture files\">\n      <created>1663513238982</created>\n      <option name=\"number\" value=\"00010\" />\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1663513238982</updated>\n    </task>\n    <task id=\"LOCAL-00011\" summary=\"icons\">\n      <created>1663518317878</created>\n      <option name=\"number\" value=\"00011\" />\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1663518317879</updated>\n    </task>\n    <task id=\"LOCAL-00012\" summary=\"refactor du code\">\n      <created>1663772034368</created>\n      <option name=\"number\" value=\"00012\" />\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1663772034368</updated>\n    </task>\n    <task id=\"LOCAL-00013\" summary=\"texture and better game win conditions\">\n      <created>1663939837747</created>\n      <option name=\"number\" value=\"00013\" />\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1663939837747</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"14\" />\n    <servers />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Base Minesweeper game\" />\n    <MESSAGE value=\"game lose, reveal whole grid\" />\n    <MESSAGE value=\"B for Bomb\" />\n    <MESSAGE value=\"Restart Button\" />\n    <MESSAGE value=\"test for icons\" />\n    <MESSAGE value=\"reset icons\" />\n    <MESSAGE value=\"r to restart\" />\n    <MESSAGE value=\"better full screen\" />\n    <MESSAGE value=\"small corrections and task repartition\" />\n    <MESSAGE value=\"texture files\" />\n    <MESSAGE value=\"icons\" />\n    <MESSAGE value=\"Simple menu with 4 presets (base game only)\" />\n    <MESSAGE value=\"refactor du code\" />\n    <MESSAGE value=\"texture and better game win conditions\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"texture and better game win conditions\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision a831c5220a8763eef4f575c3fb2e3481eb89eca3)
+++ b/.idea/workspace.xml	(date 1664962430307)
@@ -5,10 +5,12 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="3e832f75-cad5-418c-9602-d26adff604be" name="Changes" comment="texture and better game win conditions">
-      <change afterPath="$PROJECT_DIR$/textures/top0.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/textures/wrongFlag.png" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/README.md" beforeDir="false" afterPath="$PROJECT_DIR$/README.md" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Buttons/CellButton.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Buttons/CellButton.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/GridPAC/CellChangeEvent.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/GridPAC/CellChangeEvent.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/GridPAC/Grid.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/GridPAC/Grid.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/GridPAC/GridModel.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/GridPAC/GridModel.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/PAC/GameView.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/PAC/GameView.java" afterDir="false" />
     </list>
     <list id="f3490b08-647d-4663-b773-85d154917dfa" name="Changes by julien" comment="" />
     <list id="07044065-bcc7-4f16-aad4-ef538c759912" name="Changes by Neylick" comment="" />
@@ -26,7 +28,13 @@
     </option>
   </component>
   <component name="Git.Settings">
+    <option name="RECENT_BRANCH_BY_REPOSITORY">
+      <map>
+        <entry key="$PROJECT_DIR$" value="master" />
+      </map>
+    </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+    <option name="ROOT_SYNC" value="DONT_SYNC" />
   </component>
   <component name="MarkdownSettingsMigration">
     <option name="stateVersion" value="1" />
@@ -55,7 +63,20 @@
       <recent name="" />
     </key>
   </component>
-  <component name="RunManager">
+  <component name="RunManager" selected="Application.Main">
+    <configuration name="HelloWorld" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="HelloWorld.HelloWorld" />
+      <module name="Minesweeper" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="HelloWorld.*" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
     <configuration name="Main" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
       <option name="MAIN_CLASS_NAME" value="Main" />
       <module name="Minesweeper" />
@@ -63,9 +84,45 @@
         <option name="Make" enabled="true" />
       </method>
     </configuration>
+    <configuration name="SpeechRecognition" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="SpeechRecognition.SpeechRecognition" />
+      <module name="Minesweeper" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="SpeechRecognition.*" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <configuration name="TextToSpeech" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="SpeechRecognition.TextToSpeech" />
+      <module name="Minesweeper" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="SpeechRecognition.*" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <list>
+      <item itemvalue="Application.HelloWorld" />
+      <item itemvalue="Application.Main" />
+      <item itemvalue="Application.SpeechRecognition" />
+      <item itemvalue="Application.TextToSpeech" />
+    </list>
     <recent_temporary>
       <list>
         <item itemvalue="Application.Main" />
+        <item itemvalue="Application.TextToSpeech" />
+        <item itemvalue="Application.SpeechRecognition" />
+        <item itemvalue="Application.HelloWorld" />
+        <item itemvalue="Application.TextToSpeech" />
       </list>
     </recent_temporary>
   </component>
